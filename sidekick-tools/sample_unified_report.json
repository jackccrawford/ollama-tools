{
  "timestamp": "2025-08-30T20:43:24.313212",
  "file_path": "sample.py",
  "analysis_type": "comprehensive_code_review",
  "quality_score": {
    "security_score": 55,
    "architecture_score": 72.0,
    "overall_score": 61.8,
    "grade": "D",
    "risk_level": "HIGH"
  },
  "summary": {
    "total_findings": 2,
    "security_findings": 1,
    "architecture_findings": 1,
    "merged_findings": 0,
    "severity_breakdown": {
      "critical": 0,
      "high": 1,
      "medium": 1,
      "low": 0,
      "info": 0
    },
    "category_breakdown": {
      "security": 1,
      "architecture": 1
    }
  },
  "findings": [
    {
      "category": "security",
      "type": "sql_injection",
      "severity": "high",
      "title": "SQL Injection Risk",
      "description": "Potential SQL injection vulnerability",
      "line_number": 15,
      "code_snippet": "query = f'SELECT * FROM users WHERE id = {user_id}'",
      "recommendation": "Use parameterized queries",
      "confidence": 0.8,
      "source": "security_auditor"
    },
    {
      "category": "architecture",
      "type": "design_pattern",
      "severity": "medium",
      "title": "Missing Design Pattern",
      "description": "Could benefit from Factory pattern",
      "line_number": 25,
      "code_snippet": "obj = SomeClass(param1, param2)",
      "recommendation": "Consider using Factory pattern",
      "confidence": 0.6,
      "source": "architecture_reviewer"
    }
  ],
  "recommendations": [
    {
      "priority": 2,
      "title": "High Priority Issues",
      "description": "Resolve 1 high-severity findings",
      "action": "Address high-severity security and architecture issues",
      "estimated_effort": "Medium-High",
      "impact": "High"
    }
  ],
  "raw_reports": {
    "security": {
      "summary": {
        "risk_score": 45,
        "total_findings": 3
      },
      "findings": [
        {
          "category": "sql_injection",
          "severity": "high",
          "title": "SQL Injection Risk",
          "description": "Potential SQL injection vulnerability",
          "line_number": 15,
          "code_snippet": "query = f'SELECT * FROM users WHERE id = {user_id}'",
          "recommendation": "Use parameterized queries",
          "confidence": 0.8
        }
      ]
    },
    "architecture": {
      "summary": {
        "overall_score": 7.2,
        "total_findings": 2
      },
      "findings": [
        {
          "category": "design_pattern",
          "severity": "medium",
          "title": "Missing Design Pattern",
          "description": "Could benefit from Factory pattern",
          "line_number": 25,
          "code_snippet": "obj = SomeClass(param1, param2)",
          "recommendation": "Consider using Factory pattern",
          "confidence": 0.6
        }
      ]
    }
  }
}